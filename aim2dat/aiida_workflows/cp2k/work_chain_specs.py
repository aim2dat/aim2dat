"""
General input parameters and exit codes for the CP2K work chains.
"""

from aiida.plugins import CalculationFactory, DataFactory
import aiida.orm as aiida_orm

Cp2kCalculation = CalculationFactory("aim2dat.cp2k")


def structural_p_specs(spec):
    """
    Structural input parameters.
    """
    namespace = "structural_p"
    spec.input_namespace(
        namespace, required=True, help="Structure and system-specific parameters."
    )
    spec.input(
        f"{namespace}.structure",
        valid_type=DataFactory("core.structure"),
        help="The input structure.",
    )
    spec.input(
        f"{namespace}.scf_parameters",
        valid_type=aiida_orm.Dict,
        help="Initial parameters that converge the SCF-cycles.",
        required=False,
    )
    return spec


def seekpath_p_specs(spec):
    """
    Input parameters for seekpath.
    """
    # spec.input(
    #     "seekpath_p",
    #     valid_type=aiida_orm.Dict,
    #     required=False,
    #     help="Additional arguments passed to the SeekPath analysis.",
    # )
    spec.output_namespace("seekpath", required=False, help="Output parameters of SeekPath.")
    spec.output(
        "seekpath.path_parameters",
        valid_type=aiida_orm.Dict,
        help="Path parameters used in the calculation generated by SeekPath.",
        required=False,
    )
    spec.output(
        "seekpath.primitive_structure",
        valid_type=DataFactory("core.structure"),
        help="Primitive structure used for the calculation generated by SeekPath.",
        required=False,
    )
    spec.output(
        "seekpath.conv_structure",
        valid_type=DataFactory("core.structure"),
        help="Conventional structure generated by SeekPath.",
        required=False,
    )
    spec.output(
        "seekpath.explicit_kpoints",
        valid_type=DataFactory("core.array.kpoints"),
        help="Explicit kpoints generated by SeekPath.",
        required=False,
    )
    return spec


def numerical_p_specs(spec, required=False):
    """
    Numerical input parameters.
    """
    namespace = "numerical_p"
    spec.input_namespace(namespace, required=required, populate_defaults=False, help=".")
    spec.input(
        f"{namespace}.xc_functional",
        valid_type=aiida_orm.Str,
        required=False,
        help="Exchange-correlation functional used for the calculation.",
    )
    spec.input(
        f"{namespace}.cutoff_values",
        valid_type=aiida_orm.Dict,
        required=False,
        help="Cut-off values for the grids.",
    )
    spec.input(
        f"{namespace}.basis_sets",
        valid_type=(aiida_orm.Str, aiida_orm.Dict),
        required=False,
        help="Basis sets used for the different species.",
    )
    spec.input(
        f"{namespace}.basis_file",
        valid_type=DataFactory("core.singlefile"),
        help="File containing the used basis sets.",
        required=False,
    )
    spec.input(
        f"{namespace}.pseudo_file",
        valid_type=DataFactory("core.singlefile"),
        help="File containing the used pseudopotentials.",
        required=False,
    )
    return spec


def core_work_chain_exit_codes(spec):
    """
    Exit codes for the CP2K core work chains.
    """
    spec.exit_code(
        600,
        "ERROR_INPUT_WRONG_VALUE",
        message='Input parameter "{parameter}" contains an unsupported value.',
    )
    spec.exit_code(
        601,
        "ERROR_INPUT_DEPENDENCY",
        message='Input parameter "{parameter1}" needs "{parameter2}" to be set.',
    )
    spec.exit_code(
        602,
        "ERROR_INPUT_LOGICAL",
        'Either input parameter "{parameter1}" or "{parameter2}" have to be set.',
    )
    spec.exit_code(
        610,
        "ERROR_SCF_CONVERGENCE_NOT_REACHED",
        message="No parameters found to converge the Kohn-Sham equations.",
    )
    spec.exit_code(
        611,
        "ERROR_CALCULATION_ABORTED",
        message="Calculation did not finish properly.",
    )
    spec.exit_code(
        612,
        "ERROR_OPTIMIZATION_NOT_CONVERGED",
        message="Could not optimize the structure below the set thresholds.",
    )
    return spec
